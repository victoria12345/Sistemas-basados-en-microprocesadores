;*************************************************************************
; Autores: Victoria Pelayo e Ignacio Rabunnal
; grupo: 2301
; Practica 4 apartado C
;*************************************************************************

;**************************************************************************
; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT
	INTRO DB 1BH,"[1;1fLa tabla que vamos a utilizar es la siguiente$"
	LINEA1 DB 1BH,"[3;3f|   | 1 | 2 | 3 | 4 | 5 | 6 |$"
	LINEA2 DB 1BH,"[4;3f| 1 | Q | R | S | T | U | V |$"
	LINEA3 DB 1BH,"[5;3f| 2 | W | X | Y | Z | 0 | 1 |$"
	LINEA4 DB 1BH,"[6;3f| 3 | 2 | 3 | 4 | 5 | 6 | 7 |$"
	LINEA5 DB 1BH,"[7;3f| 4 | 8 | 9 | A | B | C | D |$"
	LINEA6 DB 1BH,"[8;3f| 5 | E | F | G | H | I | J |$"
	LINEA7 DB 1BH,"[9;3f| 6 | K | L | M | N | O | P |$"
	NUMERO DB 5 DUP(?)
	CLR_PANT DB 1BH,"[2","J$"
	CERRAR DB 1BH,"[12;1fCerrando programa...$"
	ERROR DB 1BH,"[11;1fERROR.Nuestro driver no esta instalado$"
	INST_DEC DB 1BH, "[14;1fIntroduzca los numeros seguidos y sin espacios: $"
	INST_COD DB 1BH, "[14;1fIntroduzca la cadena (solo numeros y letras mayusculas sin espacios): $"
	INST DB 1BH, "[11;1fespecifique lo que quiere hacer (cod/decod/quit): $"
	TEXTO DB 1BH, "[12;1f","La cadena es: $"	
	COD DB 1BH, "[13;1f","Introduzca cadena para codificar: $"	
	DECOD DB 1BH, "[13;1f","Introduzca cadena para decodificar: $"
	RESDEC DB 1BH,"[15;1f","Cadena decodificada: $"
	RESCOD DB 1BH,"[15;1f","Cadena codificada: $"
	CADENA DB 100 DUP(?)
	TABLA_N DB 43,44,45,46,51,52,53,54,55,56,61,62,63,64,65,66,11,12,13,14,15,16,21,22,23,24,25,26,31,32,33,34,35,36,41,42
	TABLA_NL DB "43","44","45","46","51","52","53","54","55","56","61","62","63","64","65","66","11","12","13","14","15","16","21","22","23","24","25","26","31","32","33","34","35","36","41","42"
	STRING DB 100 DUP(?)
DATOS ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
DB 40h DUP (0) ;ejemplo de inicialización, 64 bytes inicializados a 0
PILA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
RESULT DW 0,0 ;ejemplo de inicialización. 2 PALABRAS (4 BYTES)
EXTRA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
ASSUME CS: CODE, DS: DATOS, ES: EXTRA, SS: PILA
; COMIENZO DEL PROCEDIMIENTO PRINCIPAL
INICIO PROC
; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
MOV AX, DATOS
MOV DS, AX
MOV AX, PILA
MOV SS, AX
MOV AX, EXTRA
MOV ES, AX
MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO

; COMIENZO DEL PROGRAMA

;COMENZAMOS "LIMPIANDO" LA PANTALLA

OK_:
MOV AH,9
MOV DX, OFFSET CLR_PANT
INT 21H

;IMPRIMIMOS LA TABLA
MOV DX, OFFSET INTRO
INT 21H
MOV DX, OFFSET LINEA1
INT 21H
MOV DX, OFFSET LINEA2
INT 21H
MOV DX, OFFSET LINEA3
INT 21H
MOV DX, OFFSET LINEA4
INT 21H
MOV DX, OFFSET LINEA5
INT 21H
MOV DX, OFFSET LINEA6
INT 21H
MOV DX, OFFSET LINEA7
INT 21H

;MIRAMOS SI NUESTRO DRIVER ESTA INSTALADO
CALL DRIVER
CMP AH,1
JE OK

;SI NO ERROR
MOV AH,9
MOV DX, OFFSET ERROR
INT 21H

OK:

MOV AH,9
MOV DX, OFFSET INST
INT 21H

MOV AH, 0AH
MOV DX, OFFSET STRING
MOV STRING[0], 95
INT 21H

;COMPROBAMOS QUE NO SEA NULL
MOV BH,0
MOV BL, STRING[1]
CMP BL,0
JE FIN

;ESCRIBIMOS $ AL FINAL PARA QUE SE ESCRIBA CORRECTAMENTE
CMP STRING[2], 'q'
JNE CODi
CMP STRING[3], 'u'
JNE CODi
CMP STRING[4], 'i'
JNE CODi
CMP STRING[5], 't'
JNE CODi
JE FIN

CODi:
CMP STRING[2], 'c'
JNE DECODi
CMP STRING[3], 'o'
JNE DECODi
CMP STRING[4], 'd'
JNE DECODi

MOV AH,9
MOV DX, OFFSET COD
INT 21H

CALL CODIFICAR
JMP OK_

DECODi:
CMP STRING[2], 'd'
JNE FIN2
CMP STRING[3], 'e'
JNE FIN2
CMP STRING[4], 'c'
JNE FIN2
CMP STRING[5], 'o'
JNE FIN2
CMP STRING[6], 'd'
JNE FIN2 ;SI SE INTRODUCE ALGO DESCONOCIDO ACABA EL PROGRAMA

MOV DX, OFFSET DECOD
MOV AH,9
INT 21H

CALL DECODIFICAR
JMP OK_

; FIN DEL PROGRAMA
FIN:
MOV AH,9
MOV DX, OFFSET CERRAR
INT 21H
FIN2:
MOV AX, 4C00h
INT 21h
INICIO ENDP

;FUNCION QUE COMPRUEBA SI NUESTRO DRIVER ESTA INSTALADO
DRIVER PROC NEAR
	PUSH ES BX
	MOV AX,0
	MOV ES,AX
	
	;COMPROBAMOS QUE NO HAYA NINGUN DRIVER
	MOV BX, ES:[57H*4]
	CMP BX,0
	JNE EXISTE
	MOV BX, ES:[57H*4+2]
	CMP BX,0
	JNE EXISTE
OTRO:	
	MOV AH,0
	JMP FINAL
	
EXISTE:
	;COMPROBAMOS QUE SEA EL NUESTRO
	MOV AH, 09
	INT 57H
	CMP AH,1 ;VALOR QUE HEMOS DECIDIDO QUE DEVUELVA EL NUESTRO
	JNE OTRO ;SI NO ES EL NUESTRO QUE SALTE A OTRO
	MOV AH,1	
	
FINAL:

	
	POP BX ES
	RET

DRIVER ENDP

DECODIFICAR PROC
	MOV AH,9
	MOV DX, OFFSET INST_COD
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET STRING
	MOV STRING[0], 95
	INT 21H

	;COMPROBAMOS QUE NO SEA NULL
	MOV BH,0
	MOV BL, STRING[1]
	CMP BL,0
	JE S1
	
	;ESCRIBIMOS $ AL FINAL 
	MOV STRING[BX+2], '$'
	
	;PASAMOS A NUMEROS LA CADENA OBTENIDA
	MOV SI,0
	MOV DI, 0
	LOOP_:
	MOV AL, STRING[2+SI]
	INC SI
	MOV BL, STRING[2+SI]
	SUB AL, 48
	SUB BL, 48
	MOV AH, 00
	MOV CL, 10
	MUL CL
	ADD AL, BL
	MOV CADENA[DI], AL
	INC DI
	INC SI
	CMP STRING[2+SI], '$'
	JNE LOOP_
	MOV CADENA[DI], '$'	
	
	MOV AH,9
	MOV DX, OFFSET RESDEC
	INT 21H
	
	PUSH DS
	MOV DX, OFFSET CADENA
	MOV BX, SEG CADENA
	MOV DS, BX
	MOV AH, 11
	INT 57H
	POP DS
	
	S1:
		RET
DECODIFICAR ENDP

CODIFICAR PROC
	MOV AH,9
	MOV DX, OFFSET INST_DEC
	INT 21H

	MOV AH, 0AH
	MOV DX, OFFSET STRING
	MOV STRING[0], 95
	INT 21H

	;COMPROBAMOS QUE NO SEA NULL
	MOV BH,0
	MOV BL, STRING[1]
	CMP BL,0
	JE S2
	
	;ESCRIBIMOS $ AL FINAL 
	MOV STRING[BX+2], '$'
	
	MOV AH,9
	MOV DX, OFFSET RESCOD
	INT 21H
	
	;LLAMAMOS A LA INTERRUPCION
	PUSH DS
	MOV DX, OFFSET STRING[2]
	MOV BX, SEG STRING
	MOV DS, BX
	MOV AH, 10H
	INT 57H
	POP DS
	
	S2:
		RET
CODIFICAR ENDP

CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END INICIO